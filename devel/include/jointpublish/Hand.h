// Generated by gencpp from file jointpublish/Hand.msg
// DO NOT EDIT!


#ifndef JOINTPUBLISH_MESSAGE_HAND_H
#define JOINTPUBLISH_MESSAGE_HAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jointpublish
{
template <class ContainerAllocator>
struct Hand_
{
  typedef Hand_<ContainerAllocator> Type;

  Hand_()
    : finger0(0)
    , finger1(0)
    , finger2(0)
    , finger3(0)
    , finger4(0)  {
    }
  Hand_(const ContainerAllocator& _alloc)
    : finger0(0)
    , finger1(0)
    , finger2(0)
    , finger3(0)
    , finger4(0)  {
  (void)_alloc;
    }



   typedef uint16_t _finger0_type;
  _finger0_type finger0;

   typedef uint16_t _finger1_type;
  _finger1_type finger1;

   typedef uint16_t _finger2_type;
  _finger2_type finger2;

   typedef uint16_t _finger3_type;
  _finger3_type finger3;

   typedef uint16_t _finger4_type;
  _finger4_type finger4;





  typedef boost::shared_ptr< ::jointpublish::Hand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jointpublish::Hand_<ContainerAllocator> const> ConstPtr;

}; // struct Hand_

typedef ::jointpublish::Hand_<std::allocator<void> > Hand;

typedef boost::shared_ptr< ::jointpublish::Hand > HandPtr;
typedef boost::shared_ptr< ::jointpublish::Hand const> HandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jointpublish::Hand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jointpublish::Hand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jointpublish

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'jointpublish': ['/home/charlie/catkin_ws/src/seniorthesis/jointpublish/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jointpublish::Hand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jointpublish::Hand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jointpublish::Hand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jointpublish::Hand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jointpublish::Hand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jointpublish::Hand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jointpublish::Hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6238b1f4e088b01e52fa1b839fd5b086";
  }

  static const char* value(const ::jointpublish::Hand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6238b1f4e088b01eULL;
  static const uint64_t static_value2 = 0x52fa1b839fd5b086ULL;
};

template<class ContainerAllocator>
struct DataType< ::jointpublish::Hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jointpublish/Hand";
  }

  static const char* value(const ::jointpublish::Hand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jointpublish::Hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 finger0\n\
uint16 finger1\n\
uint16 finger2\n\
uint16 finger3\n\
uint16 finger4\n\
";
  }

  static const char* value(const ::jointpublish::Hand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jointpublish::Hand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.finger0);
      stream.next(m.finger1);
      stream.next(m.finger2);
      stream.next(m.finger3);
      stream.next(m.finger4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Hand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jointpublish::Hand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jointpublish::Hand_<ContainerAllocator>& v)
  {
    s << indent << "finger0: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.finger0);
    s << indent << "finger1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.finger1);
    s << indent << "finger2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.finger2);
    s << indent << "finger3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.finger3);
    s << indent << "finger4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.finger4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOINTPUBLISH_MESSAGE_HAND_H
